import os

AddOption('--toolchain', dest='toolchain', choices=['gnu', 'clang'],
          default='gnu', help='Toolchain Specification')

AddOption('--compile-tests', action='store_true', dest='compile_tests',
          default=False,
          help='Compile the unit tests')

AddOption('--build-exe', action='store_true', dest='build_exe', default=False,
          help='Build Executable')

build_exe = GetOption('build_exe')
compile_tests = GetOption('compile_tests')

# myroomies server source files
src_files = Glob('src/resources/*.cpp')
src_files += Glob('src/utils/*.cpp')
src_files += Glob('src/utils/db/*.cpp')
src_files += Glob('src/services/*.cpp')
src_files += Glob('src/bom/*.cpp')
src_files += Glob('src/model/*.cpp')

# unit tests
test_files = Glob('test/unit/*.cpp')
test_files += Glob('test/unit/resources/*.cpp')
test_files += Glob('test/unit/utils/*.cpp')
test_files += Glob('test/unit/model/*.cpp')
test_files += Glob('test/unit/services/*.cpp')

libs = ['pthread',
        'soci_core',
        'boost_thread',
        'boost_system',
        'boost_filesystem',
        'boost_program_options',
        'boost_date_time',
        'boost_timer',
        'boost_chrono',
        'boost_serialization',
        'httpserver',
        'scrypt'
        ]

cxx_flags = ['--std=c++14',
             '-g',
             '-Wall',
             '-ftemplate-backtrace-limit=0',
             '-Werror',
             '-Wpedantic',
             '-DSOCI_USE_BOOST=1'
            ]

base_env = Environment(CXXFLAGS=cxx_flags,
                       LIBS=libs,
                       LIBPATH='.',
                       CPPPATH='#include')

base_env['ENV']['CPATH'] = os.environ['CPATH']
base_env['ENV']['LIBRARY_PATH'] = os.environ['LIBRARY_PATH']
base_env.Replace(TOOLCHAIN=GetOption('toolchain'))
if base_env['TOOLCHAIN'] == 'clang':
    base_env.Replace(CXX='clang++')

myroomies_server_filename =\
    'myroomies-server-{}'.format(GetOption('toolchain'))
myroomies_unittest_filename =\
    'myroomies-unittest-{}'.format(GetOption('toolchain'))

base_env.StaticLibrary(myroomies_server_filename, src_files)
base_env.Prepend(LIBS=[myroomies_server_filename])

if build_exe:
    myroomies_server_exe = base_env.Object('src/ServerMain.cpp')
    base_env.Program(myroomies_server_filename, myroomies_server_exe)

if compile_tests:
    test_env = base_env.Clone()
    test_env.Prepend(LIBS=['boost_unit_test_framework'])
    test_env.AppendUnique(CXXFLAGS=['-DBOOST_TEST_DYN_LINK'])
    test_env.StaticLibrary(myroomies_unittest_filename, test_files)
    if build_exe:
        test_env.Program(myroomies_unittest_filename, test_files)
